- test_cases = question.test_cases
- public_test_cases = test_cases.select(&:public_test?)
- private_test_cases = test_cases.select(&:private_test?)
- evaluation_test_cases = test_cases.select(&:evaluation_test?)
- submission = answer.submission
- auto_grading = answer.auto_grading ? answer.auto_grading.actable : nil
- answer_test_results_hash = auto_grading ? \
    auto_grading.test_results.map { |result| [result.test_case, result] }.to_h : \
    {}

h3 = t('.test_cases')

table.table.table-striped.table-hover
  thead
    tr
      th = Course::Assessment::Question::ProgrammingTestCase.human_attribute_name(:identifier)
      th = Course::Assessment::Question::ProgrammingTestCase.human_attribute_name(:expression)
      th = Course::Assessment::Question::ProgrammingTestCase.human_attribute_name(:expected)
      th = Course::Assessment::Question::ProgrammingTestCase.human_attribute_name(:hint)
      th = t('.passed')
  tbody
    tr
      th colspan=5
        = t('.public')
    - public_test_cases.each do |test_case|
      - test_case_result = answer_test_results_hash[test_case]
      = content_tag_for(:tr, test_case) do
        th = format_html(test_case.identifier)
        td = format_html(test_case.expression)
        td = format_html(test_case.expected)
        td = format_html(test_case.hint) if !test_case_result || !test_case_result.passed?
        td
          - if test_case_result && test_case_result.passed?
            = fa_icon 'check'.freeze
          - elsif test_case_result
            = fa_icon 'times'.freeze
  - if can?(:grade, answer.answer) && !submission.attempting?
    tbody
      tr
        th colspan=5
          = t('.private')
      - private_test_cases.each do |test_case|
        - test_case_result = answer_test_results_hash[test_case]
        = content_tag_for(:tr, test_case) do
          th = format_html(test_case.identifier)
          td = format_html(test_case.expression)
          td = format_html(test_case.expected)
          td = format_html(test_case.hint) if !test_case_result || !test_case_result.passed?
          td
            - if test_case_result && test_case_result.passed?
              = fa_icon 'check'.freeze
            - elsif test_case_result
              = fa_icon 'times'.freeze
      tbody
        tr
          th colspan=5
            = t('.evaluation')
        - evaluation_test_cases.each do |test_case|
          - test_case_result = answer_test_results_hash[test_case]
          = content_tag_for(:tr, test_case) do
            th = format_html(test_case.identifier)
            td = format_html(test_case.expression)
            td = format_html(test_case.expected)
            td = format_html(test_case.hint) if !test_case_result || !test_case_result.passed?
            td
              - if test_case_result && test_case_result.passed?
                = fa_icon 'check'.freeze
              - elsif test_case_result
                = fa_icon 'times'.freeze

- failed_public_test_cases = public_test_cases. \
    select { |t| answer_test_results_hash[t] && !answer_test_results_hash[t].passed? }
- if !failed_public_test_cases.empty?
    div.panel.panel-danger
      div.panel-heading = t('.failed_public_message')
      div.panel-body = format_html(answer_test_results_hash[failed_public_test_cases.first].message)

- failed_private_test_cases = private_test_cases. \
    select { |t| answer_test_results_hash[t] && !answer_test_results_hash[t].passed? }
- if failed_public_test_cases.empty? && !failed_private_test_cases.empty?
    div.panel.panel-danger
      div.panel-heading = t('.failed_private_message')
      div.panel-body = format_html(failed_private_test_cases.map(&:hint).compact.first)

- failed_evaluation_test_cases = evaluation_test_cases. \
    select { |t| answer_test_results_hash[t] && !answer_test_results_hash[t].passed? }
- if can?(:grade, answer.answer) && !failed_evaluation_test_cases.empty?
    div.panel.panel-danger
      div.panel-heading = t('.failed_evaluation_message')
      div.panel-body = format_html(failed_evaluation_test_cases.map(&:hint).compact.first)
