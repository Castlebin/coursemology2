- if answer.submission.attempting? && answer.specific.is_a?(Course::Assessment::Answer::Programming)
  - programming_answer = answer.specific
  - if answer.question.actable.attempt_limit
    - button_text = t('.run_code_with_limit', limit: programming_answer.attempting_times_left)
  - else
    - button_text = t('.run_code')

  - if answer.attempting?
    div.btn-group
      = link_to_reset_answer(answer)
      / TODO: Consider refactor of whether to show the `Run Code` button
      - if answer.question.auto_gradable?
        - has_public_or_private_tests = !answer.question.specific.test_cases. \
            select { |t| t.public_test? || t.private_test? }.blank?
        - if has_public_or_private_tests
          = base_answer_form.button :button, button_text,
                                    value: answer.id,
                                    name: 'answer_id',
                                    class: ['submit-answer', 'btn-danger'],
                                    disabled: !enable_submit_button?(programming_answer)
        / If autograded programming question has no public or private tests,
        / then it must have evaluation tests.
        - elsif can?(:manage, answer.question.specific)
          = base_answer_form.button :button, button_text,
                                             value: answer.id,
                                             name: 'answer_id',
                                             class: ['submit-answer', 'btn-danger'],
                                             title: t('.run_code_evaluation_warning'),
                                             disabled: !enable_submit_button?(programming_answer)
  - elsif answer.submitted? && job = answer.try(:auto_grading).try(:job)
    - if job.errored?
      p.bg-danger = t('.error')
      = base_answer_form.button :button, button_text, value: answer.id, name: 'answer_id', class: ['submit-answer', 'btn-danger']
    - elsif job.submitted?
      = link_to '#', class: ['btn', 'btn-danger', 'submitted'], 'data-job-path': job_path(job), disabled: true do
        => button_text
        = fa_icon 'spinner lg spin'
